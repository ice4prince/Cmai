# [[tool.pdm.source]]
# url = "https://download.pytorch.org/whl/cu116"
# verify_ssl = true
# name = "torch"


[tool.mypy]
mypy_path = "./__types"
exclude = [
  "__pypackages__/",
  "./__types",  # for pyright autogen stubs
]

follow_imports_for_stubs = true
follow_imports = "silent"

disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

disallow_untyped_calls = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false

implicit_optional = true
strict_optional = true


warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = false
warn_return_any = false
warn_unreachable = true

ignore_errors = false

allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
strict_equality = true
strict = true

warn_unused_configs = true

[tool.isort]
py_version = "auto"

# profile = "black"
group_by_package = true
color_output = true
combine_straight_imports = true

import_heading_stdlib = "Standard Library"


known_db = ["lucene", "lupyne", "elasticsearch", "sqlite", "shelve"]
import_heading_db = "Database"

known_tf = ["tensorflow", "keras"]
import_heading_tf = "Tensorflow"

known_torch = ["torch", "torchdata", "torchvision", "pytorch_lightning"]
import_heading_torch = "Torch"

known_jax = ["jax", "haiku", "flax", "optax", "jraph", "chex", "jaxopt"]
import_heading_jax = "JAX"

known_types = ["typing", "types", "jax.typing", "jaxtyping", "numpy.typing", "typing_extensions"]
import_heading_types = "Types"

known_config = ["config", "settings", "cfg", "smile_config"]
import_heading_config = "Config"

known_math = ["numpy", "scipy", "sklearn", "pandas"]
import_heading_math = "Math"

known_plot = ["matplotlib"]
import_heading_plot = "Plot"

import_heading_thirdparty = "Others"

import_heading_localfolder = "Local"
known_localfolder = ["sites", "src", "brain"]

import_heading_utils = "Utils"
known_utils = ["tqdm", "rich"]

sections = ["FUTURE", "FIRSTPARTY", "STDLIB", "TYPES", "UTILS", "DB", "MATH", "PLOT", "TF", "TORCH", "JAX", "CONFIG", "THIRDPARTY", "LOCALFOLDER"]


[tool.pyright]
pythonVersion = "3.10"
extraPaths = [
  "__pypackages__/3.9/lib",
  "__pypackages__/3.10/lib",
  "__pypackages__/3.11/lib",
  "src",
]

exclude = [
    "**/__pycache__",
]

useLibraryCodeForTypes = true


[tool.ruff]

exclude = [ "__types", "src/brain/optim/lion.py" ]

fix = false
unfixable = ["F401", "F841", "C417"]
format = "grouped"
# show-source = true

select = [
  "F", "E", "W", "C90", "I", "N", "D", "UP", "YTT", "ANN", "S", "BLE", "FBT", "B", "A", "COM", "C4", "DTZ", "T10",
  "EM", "EXE", "ISC", "ICN", "G", "INP", "PIE", "T20", "PT", "Q", "RET", "SIM", "TID", "ARG", "ERA",
  "PD", "PGH", "PL", "TRY", "RSE", "SLF", "RUF"
]
ignore = [
  "ANN101", "C417", "COM812", "D203", "D213",
  "FBT002", "EM102", "ERA001", "EXE001", "FBT001",
  "I001", "PD", "S101", "TRY003", "UP009",
]

# show-fixes = true

[tool.ruff.per-file-ignores]
"__init__.py" = [ "D104" ]

[tool.ruff.pylint]
max-args = 10

[tool.ruff.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 15.
max-complexity = 15

[project]
name = "rfold"
version = "0.1.0"
description = ""
authors = [
    {name = "Nasy", email = "nasyxx+git@gmail.com"},
]
dependencies = [
    "tyro>=0.5.5",
    "rich>=13.5.2",
    "biopython>=1.81",
]
requires-python = ">=3.10"
license = {text = "MIT"}

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
