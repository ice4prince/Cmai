#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:{} arch:headline
#+options: author:t broken-links:mark c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: readme
#+date: <2022-07-09 Sat>
#+author: Nasy
#+email: nasyxx@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.0.50 (Org mode 9.5.4)
#+cite_export:

* RoseTTAFold infer

** Requirments

+ self
  -  =git clone --recursive git@github.com:nasyxx/rfscripts.git=
  - =cd rfscripts=
+ RoseTTAFold.  Set path to RoseTTAFold in =path.rf= in ~config.py~
  - The default is in the =RoseTTAFold= folder, which comes with this repo.
+ Data
  - Follow the RoseTTAFold format.
  - You can run this to download all data
#+begin_src sh
  # goto RoseTTAFold folder
  cd RoseTTAFold

  # uniref30 [46G]
  wget http://wwwuser.gwdg.de/~compbiol/uniclust/2020_06/UniRef30_2020_06_hhsuite.tar.gz
  mkdir -p UniRef30_2020_06
  tar xfz UniRef30_2020_06_hhsuite.tar.gz -C ./UniRef30_2020_06

  # BFD [272G]
  wget https://bfd.mmseqs.com/bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt.tar.gz
  mkdir -p bfd
  tar xfz bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt.tar.gz -C ./bfd

  # structure templates (including *_a3m.ffdata, *_a3m.ffindex) [over 100G]
  wget https://files.ipd.uw.edu/pub/RoseTTAFold/pdb100_2021Mar03.tar.gz
  tar xfz pdb100_2021Mar03.tar.gz
  # for CASP14 benchmarks, we used this one: https://files.ipd.uw.edu/pub/RoseTTAFold/pdb100_2020Mar11.tar.gz

  # back to project root
  cd ..
#+end_src
+ Inputs
  - fasta files.
  - Use =path/to/*.fasta= to select multiple files.
+ Outputs
  - In =path.out= in ~config.py~ (default in =results= folder.)
    + data :: the preprocessed data.
    + pred :: =IDX.uniq= for all pdb ids. =*.pdb= for predicted pdb
      files. =*.feature.npz= contains =msa, lddt, and xyz= features.
    + work :: temp folder

*** Scripts

+ ~python >= 3.9, <3.11~
+ ~rich~
+ ~smile_config~
+ ~biopython~
+ ~tqdm~
+ ~fire~

  You may install by

=conda create -n py310 python=3.10=

=conda activate py310=

And after activate ~py310~ install the following packages by:

=pip install rich smile_config biopython -U=

Install an old version of hhsuite https://github.com/RosettaCommons/RoseTTAFold/issues/3

=wget https://github.com/soedinglab/hh-suite/releases/download/v3.2.0/hhsuite-3.2.0-AVX2-Linux.tar.gz --no-check-certificate=

=tar xvfz hhsuite-3.2.0-AVX2-Linux.tar.gz=

Now you can see hhsuite bin in ~bin/~

*** RoseTTAFold

Requirments from RoseTTAFold.

Go to RoseTTAFold folder.

=cd RoseTTAFold=.

Install by

=conda env create -f RoseTTAFold-linux.yml=

*csblast and lddt*: =./install_dependencies.sh=

*Weights*: in RoseTTAFold folder,

=wget https://files.ipd.uw.edu/pub/RoseTTAFold/weights.tar.gz=

=tar xfz weights.tar.gz=

** Run

Back to the base folder, and run it.

#+begin_src sh
  cd ..  # project root
  conda activate py310
  python rfpd.py --gen_msa t --run_rf t
#+end_src

You can also run it with arguments:

#+begin_src sh
  python rfpd.py --gen_msa t --run_rf t --use_cpu cpu --path.data "path/to/data_folder" --path.out "path/to/results" --path.rf "path/to/RoseTTAFold" --in_fasta "path/to/*.fa"
#+end_src

Or change the =config.py= file.

All arguments and their default values are listed by ~python rfpd.py
--help~.

#+begin_src sh
  usage: rfpd.py [-h] [--in_fasta IN_FASTA] [--cpu CPU] [--mem MEM] [--use_cpu USE_CPU] [--gen_msa GEN_MSA] [--run_rf RUN_RF] [--path.data PATH.DATA]
                 [--path.rf PATH.RF] [--path.out PATH.OUT] [--path.logs PATH.LOGS] [--exe.hhsearch EXE.HHSEARCH] [--exe.hhblits EXE.HHBLITS]
                 [--exe.hhfilter EXE.HHFILTER] [--exe.psipred EXE.PSIPRED] [--exe.psipass2 EXE.PSIPASS2]

  Config for RoseTTAFold script.

  options:
    -h, --help            show this help message and exit
    --in_fasta IN_FASTA   Input fasta files. (default: cleaned.antigen.fasta)
    --cpu CPU             Max CPUs. (default: 32)
    --mem MEM             Max Memory (in GB). (default: 128)
    --use_cpu USE_CPU     cpu|gpu (default: cpu)
    --gen_msa GEN_MSA     - (default: False)
    --run_rf RUN_RF       - (default: False)

  path:
    --path.data PATH.DATA
                          Data base folder. (default: /project/DPDS/Wang_lab/shared/BCR_antigen/data)
    --path.rf PATH.RF     RosettaFold folder. (default: RoseTTAFold)
    --path.out PATH.OUT   Output folder. (default: results)
    --path.logs PATH.LOGS
                          Logs folder. (default: logs)

  exe:
    --exe.hhsearch EXE.HHSEARCH
                          HHsearch executable. (default: bin/hhsearch)
    --exe.hhblits EXE.HHBLITS
                          HHblits executable. (default: bin/hhblits)
    --exe.hhfilter EXE.HHFILTER
                          HHfilter executable. (default: bin/hhfilter)
    --exe.psipred EXE.PSIPRED
                          PSIPRED executable. (default: psipred)
    --exe.psipass2 EXE.PSIPASS2
                          PSIPASS2 executable. (default: psipass2)
#+end_src

** Single fasta to multiple fastas

~tofastas.py~ supports to split a single fasta file to multiple fasta files.

#+begin_src sh
  > python tofastas.py --help

  NAME
      tofastas.py - From input fasta file(INF) to out dir(OUT) fasta files.

  SYNOPSIS
      tofastas.py INF OUT

  DESCRIPTION
      From input fasta file to out dir fasta files.

  POSITIONAL ARGUMENTS
      INF
          Type: str
      OUT
          Type: str

  NOTES
      You can also use flags syntax for POSITIONAL ARGUMENTS
#+end_src

For example, if tast.fa like this:

#+begin_src
  > test_1
  AAAAAA
  > test_2
  BBBBBB
  > test_3
  CCCCCC
#+end_src

#+begin_src sh
  > python tofastas.py test.fa test
  > ls test/
  test_1.fasta  test_2.fasta  test_3.fasta
#+end_src

* Output

Output is in the =results= folder.  The feature named =pair= in the
~ID.feature.npz~.  And it can be loaded by:

- =features = np.load("results/pred/ID.feature.npz")=
- =pair = features["pair"]=
